(in-package #:client.core)

(defun make-url (url query)
  (if query
      (+ url "?" query)
      url))

(defun file-p (o)
  (and o (= (@ o constructor) -file)))

(defun make-form-data (file)
  (let ((res (new (-form-data))))
    (chain res (append (@ file name) file))
    res))

(defun show-error (err)
  (chain console (error err)))

(defvar *token* nil)

(defun http-make-error (response o)
  (chain console (log response))
  (throw (+ (@ response status) " " (@ response status-text) ": " o)))

(defun http-process-response (response on-read)
  (let ((ct (chain response headers (get "Content-Type"))))
    (cond 
      ((chain (or ct "") (starts-with "text/html"))
       (chain response (text)
	      (then on-read)))

      ((= ct "application/json")
       (chain response (json)
	      (then on-read)))

      ((= ct "image/png")
       (chain response (blob)
	      (then on-read)))

      (t
       (http-make-error response "Unprocessable content type")))))

(defun http-process-error (response)
  (when (= (@ response status) 403)
    (setf *token* nil)
    (set-cookie :user nil)
    (shared/set user nil))

  (http-process-response
   response
   (lambda (o)
     (http-make-error response o))))

(defun make-headers (props)
  (let ((headers (create "content-type" (if (file-p (@ props body))
					    "multipart/form-data"
					    "application/json")))
	(token (or (@ props token) *token*)))
    (when token
      (setf (getprop headers "Authorization") (+ "Bearer " token)))
    headers))

(defun request-server (props)
  (chain
   (fetch
    (make-url (@ props url) (@ props query))
    (create method (@ props method)
	    headers (make-headers props)
	    body (if (file-p (@ props body))
		     (make-form-data (@ props body))
		     (chain -j-s-o-n (stringify (@ props body))))))
   (then
    (lambda (response)
      (cond
	((@ response ok)
	 (http-process-response
	  response
	  (lambda (o)
	    (chain props (on-success o)))))

	((@ props on-error)
	 (let ((r (chain props (on-error response))))
	   (when (eql r :processed)
	     (http-process-error response))))

	(t
	 (http-process-error response)))))
   (catch
       (lambda (err)
	 (if (@ props on-error)
	     (let ((r (chain props (on-error err))))
	       (when (eql r :processed)
		 (chain console (error err))
		 (show-error err)))
	     (progn
	       (chain console (error err))
	       (show-error err)))))))

;; Requests

(defun login (body on-success on-error)
  (request-server
   (create url "login"
	   method "POST"
	   body body
	   on-success on-success
	   on-error on-error)))

(defun server-logout (on-success)
  (request-server
   (create url "logout"
	   method "POST"
	   body (create)
	   on-success on-success)))

(defun check-authorization (props)
  (request-server
   (create url "/check-authorization"
	   method "GET"
	   token (@ props token)
	   on-success (lambda (response)
			(chain props (on-success))
			(chain props (on-finish)))
	   on-error (lambda (response)
		      (chain props (on-finish))
		      (when (= (@ response status) 403)
			(chain props (on-error))
			:processed)))))
